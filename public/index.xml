<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sweetpear&#39;s Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Sweetpear&#39;s Blog</description>
    <image>
      <title>Sweetpear&#39;s Blog</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 08 Aug 2024 00:00:00 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python入门</title>
      <link>http://localhost:1313/posts/python/python/</link>
      <pubDate>Thu, 08 Aug 2024 00:00:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/python/python/</guid>
      <description>python基础语法，包括数据类型、函数、类等</description>
    </item>
    <item>
      <title>Postgres 批量删除语句超时</title>
      <link>http://localhost:1313/posts/postgres/pg_timeout/</link>
      <pubDate>Sat, 16 Mar 2024 17:26:22 +0800</pubDate>
      <guid>http://localhost:1313/posts/postgres/pg_timeout/</guid>
      <description>Postgres 批量删除语句超时 场景 播放记录表history中大约有将近10亿条数据，为了减少内存占用，后台任务以每秒一次的速度删除超过1年未更新的旧记录。
表结构（示意结构） Table &amp;#34;public.history&amp;#34; Column | Type | Collation | Nullable | Default --------+--------+-----------+----------+--------- uid | text | | not null | vid | text | | not null | ts | bigint | | not null | Indexes: &amp;#34;history_pkey&amp;#34; PRIMARY KEY, btree (uid, vid) &amp;#34;history_ts&amp;#34; btree (ts) 删除语句 delete from history where (uid, vid) in (select uid, vid from history where ts &amp;lt;= $1 limit 500) 问题出现 任务稳定运行了一年多的时间，突然有一天线上日志出现了大量的超时报错，排查后发现是pg执行删除语句的时候超过了最大时限 pq: canceling statement due to user request</description>
    </item>
    <item>
      <title>redis 哨兵机制</title>
      <link>http://localhost:1313/posts/redis/sentinel/</link>
      <pubDate>Fri, 08 Mar 2024 18:32:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/redis/sentinel/</guid>
      <description>Redis的哨兵机制解决了主库故障的问题，通过监控、选主和通知实现高可用性和故障转移，提供可靠的服务。</description>
    </item>
    <item>
      <title>质数筛法</title>
      <link>http://localhost:1313/posts/algorithm/prime/</link>
      <pubDate>Fri, 01 Mar 2024 18:01:11 +0800</pubDate>
      <guid>http://localhost:1313/posts/algorithm/prime/</guid>
      <description>文章介绍了判断质数的两种筛法：埃氏筛标记质数倍数但会重复标记合数，欧拉筛避免了重复但需额外空间存储验证过的质数。</description>
    </item>
    <item>
      <title>redis 主从复制机制</title>
      <link>http://localhost:1313/posts/redis/replication/</link>
      <pubDate>Fri, 01 Mar 2024 18:01:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/redis/replication/</guid>
      <description>Redis主从复制将数据备份到多个从服务器，提高可用性。主从同步包括全量复制、基于长连接的命令传播、增量复制阶段。</description>
    </item>
    <item>
      <title>redis 持久化之RDB</title>
      <link>http://localhost:1313/posts/redis/rdb/</link>
      <pubDate>Sun, 11 Feb 2024 23:59:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/redis/rdb/</guid>
      <description>RDB记录了某一时刻的数据，恢复效率高。全量快照可以同步或异步执行，异步执行使用写时复制技术，避免了主进程阻塞。增量快照记录了增量修改的元数据信息。混合快照通过同时使用RDB和AOF格式，既提供快速恢复又减少数据丢失。</description>
    </item>
    <item>
      <title>redis 持久化之AOF</title>
      <link>http://localhost:1313/posts/redis/aof/</link>
      <pubDate>Wed, 07 Feb 2024 19:50:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/redis/aof/</guid>
      <description>AOF是Redis的一种持久化方式，将写命令记录到文件中，用于数据恢复。它以文本形式保存，可读性强，但空间占用较大。AOF有三种写回策略，影响数据丢失和主进程阻塞。Redis通过重写机制优化AOF文件，提高性能。 AOF恢复速度较慢，但可靠。</description>
    </item>
    <item>
      <title>redis 数据结构</title>
      <link>http://localhost:1313/posts/redis/data_structure/</link>
      <pubDate>Fri, 02 Feb 2024 23:35:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/redis/data_structure/</guid>
      <description>详细分析了redis底层数据结构，由下到上认识了基本数据类型以及优点缺点。</description>
    </item>
    <item>
      <title>redis 全景图</title>
      <link>http://localhost:1313/posts/redis/overall/</link>
      <pubDate>Thu, 01 Feb 2024 17:33:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/redis/overall/</guid>
      <description>从宏观俯瞰redis</description>
    </item>
    <item>
      <title>Go select关键字</title>
      <link>http://localhost:1313/posts/golang/select/</link>
      <pubDate>Wed, 17 Jan 2024 16:40:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang/select/</guid>
      <description>select关键字用于多路通信和同步，可以同时监听多个channel的状态，并等待其中一个channel就绪。它具有非阻塞收发和随机执行的特点，通过编译和运行时的优化与机制来实现多路通信。select是Go中处理并发通信和同步的强大工具。</description>
    </item>
    <item>
      <title>Go channel原理</title>
      <link>http://localhost:1313/posts/golang/channel/</link>
      <pubDate>Fri, 12 Jan 2024 21:23:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang/channel/</guid>
      <description>文章深入讲解Go语言的channel原理，包括其创建、发送、接收和关闭四个操作，并解答了nil channel的应用场景和channel可能导致的资源泄露问题，对内存对齐操作进行了说明。</description>
    </item>
    <item>
      <title>I/O 与 Go 网络轮询器</title>
      <link>http://localhost:1313/posts/golang/netpoll/</link>
      <pubDate>Fri, 05 Jan 2024 23:20:28 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang/netpoll/</guid>
      <description>Netpoll是Go语言中的网络轮询器，采用NIO和多路复用的机制，保证了在I/O密集型服务中，能够进行用户级调度，提高并发能力，减少系统资源占用。然而，如果服务器在短时间内建立了大量连接，可能导致创建过多的goroutine，消耗系统资源。</description>
    </item>
    <item>
      <title>Go init函数</title>
      <link>http://localhost:1313/posts/golang/init/</link>
      <pubDate>Tue, 26 Dec 2023 19:31:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang/init/</guid>
      <description>介绍了init函数的特点、调用顺序和项目初始化流程。</description>
    </item>
    <item>
      <title>Go 垃圾收集器</title>
      <link>http://localhost:1313/posts/golang/collector/</link>
      <pubDate>Fri, 22 Dec 2023 16:48:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang/collector/</guid>
      <description>该文章介绍了Go语言中的垃圾回收机制，包括算法、策略和优化技术。</description>
    </item>
    <item>
      <title>git 基础概念以及合并操作</title>
      <link>http://localhost:1313/posts/git/git/</link>
      <pubDate>Fri, 08 Dec 2023 15:46:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/git/git/</guid>
      <description>文章详述了Git的基础概念如工作区、版本库、HEAD与分支，详解了合并操作包括merge和rebase方法及优劣，还讲到了rebase的&amp;ndash;onto操作和cherry-pick方法。详尽介绍了如何操作Git进行版本控制，使工作更高效.</description>
    </item>
    <item>
      <title>Go 内存分配器</title>
      <link>http://localhost:1313/posts/golang/memory/</link>
      <pubDate>Sat, 02 Dec 2023 22:39:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang/memory/</guid>
      <description>介绍了go内存分配的三级模型，还讨论了分配器的种类和设计原则，以及内存布局的组件和对象分配的流程。整体而言，Go的内存分配器通过多级缓存和分级分配的思想，提高了内存管理的效率和空间利用率。</description>
    </item>
    <item>
      <title>Go 调度器</title>
      <link>http://localhost:1313/posts/golang/goroutine/</link>
      <pubDate>Tue, 14 Nov 2023 17:31:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang/goroutine/</guid>
      <description>介绍了goroutine和线程的区别，包括创建销毁成本、内存占用和切换成本。讲述了Go程序的执行过程和调度器的结构及调度过程。</description>
    </item>
    <item>
      <title>Go 参数传递机制</title>
      <link>http://localhost:1313/posts/golang/function_paramter_passing/</link>
      <pubDate>Fri, 27 Oct 2023 20:58:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang/function_paramter_passing/</guid>
      <description>这篇文章讨论了Go语言中的参数传递机制，特别是在处理切片和映射时的行为。文章提到参数传递规则、切片结构和共享、修改和添加元素的影响，以及映射的实质。</description>
    </item>
    <item>
      <title>Go map</title>
      <link>http://localhost:1313/posts/golang/map/</link>
      <pubDate>Mon, 23 Oct 2023 19:17:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang/map/</guid>
      <description>介绍了map的底层结构以及扩容过程</description>
    </item>
  </channel>
</rss>
