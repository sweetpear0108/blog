<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Golang on Sweetpear&#39;s Blog</title>
    <link>http://localhost:1313/tags/golang/</link>
    <description>Recent content in Golang on Sweetpear&#39;s Blog</description>
    <image>
      <title>Sweetpear&#39;s Blog</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 17 Jan 2024 16:40:00 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go select关键字</title>
      <link>http://localhost:1313/posts/golang/select/</link>
      <pubDate>Wed, 17 Jan 2024 16:40:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang/select/</guid>
      <description>select关键字用于多路通信和同步，可以同时监听多个channel的状态，并等待其中一个channel就绪。它具有非阻塞收发和随机执行的特点，通过编译和运行时的优化与机制来实现多路通信。select是Go中处理并发通信和同步的强大工具。</description>
    </item>
    <item>
      <title>Go channel原理</title>
      <link>http://localhost:1313/posts/golang/channel/</link>
      <pubDate>Fri, 12 Jan 2024 21:23:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang/channel/</guid>
      <description>文章深入讲解Go语言的channel原理，包括其创建、发送、接收和关闭四个操作，并解答了nil channel的应用场景和channel可能导致的资源泄露问题，对内存对齐操作进行了说明。</description>
    </item>
    <item>
      <title>I/O 与 Go 网络轮询器</title>
      <link>http://localhost:1313/posts/golang/netpoll/</link>
      <pubDate>Fri, 05 Jan 2024 23:20:28 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang/netpoll/</guid>
      <description>Netpoll是Go语言中的网络轮询器，采用NIO和多路复用的机制，保证了在I/O密集型服务中，能够进行用户级调度，提高并发能力，减少系统资源占用。然而，如果服务器在短时间内建立了大量连接，可能导致创建过多的goroutine，消耗系统资源。</description>
    </item>
    <item>
      <title>Go init函数</title>
      <link>http://localhost:1313/posts/golang/init/</link>
      <pubDate>Tue, 26 Dec 2023 19:31:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang/init/</guid>
      <description>介绍了init函数的特点、调用顺序和项目初始化流程。</description>
    </item>
    <item>
      <title>Go 垃圾收集器</title>
      <link>http://localhost:1313/posts/golang/collector/</link>
      <pubDate>Fri, 22 Dec 2023 16:48:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang/collector/</guid>
      <description>该文章介绍了Go语言中的垃圾回收机制，包括算法、策略和优化技术。</description>
    </item>
    <item>
      <title>Go 内存分配器</title>
      <link>http://localhost:1313/posts/golang/memory/</link>
      <pubDate>Sat, 02 Dec 2023 22:39:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang/memory/</guid>
      <description>介绍了go内存分配的三级模型，还讨论了分配器的种类和设计原则，以及内存布局的组件和对象分配的流程。整体而言，Go的内存分配器通过多级缓存和分级分配的思想，提高了内存管理的效率和空间利用率。</description>
    </item>
    <item>
      <title>Go 调度器</title>
      <link>http://localhost:1313/posts/golang/goroutine/</link>
      <pubDate>Tue, 14 Nov 2023 17:31:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang/goroutine/</guid>
      <description>介绍了goroutine和线程的区别，包括创建销毁成本、内存占用和切换成本。讲述了Go程序的执行过程和调度器的结构及调度过程。</description>
    </item>
    <item>
      <title>Go 参数传递机制</title>
      <link>http://localhost:1313/posts/golang/function_paramter_passing/</link>
      <pubDate>Fri, 27 Oct 2023 20:58:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang/function_paramter_passing/</guid>
      <description>这篇文章讨论了Go语言中的参数传递机制，特别是在处理切片和映射时的行为。文章提到参数传递规则、切片结构和共享、修改和添加元素的影响，以及映射的实质。</description>
    </item>
    <item>
      <title>Go map</title>
      <link>http://localhost:1313/posts/golang/map/</link>
      <pubDate>Mon, 23 Oct 2023 19:17:00 +0800</pubDate>
      <guid>http://localhost:1313/posts/golang/map/</guid>
      <description>介绍了map的底层结构以及扩容过程</description>
    </item>
  </channel>
</rss>
